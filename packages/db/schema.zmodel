// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

plugin openapi {
    provider = '@zenstackhq/openapi'
    output = './openapi.yaml'
    title = 'My awesome API'
    version = '0.5.0'
    summary = 'Created with ZenStack'
    description = 'My awesome API created with ZenStack'
    prefix = '/api'
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Post {
    id String @id @default(cuid())
    title String
    content String
}

// NextAuth.js Models
// NOTE: When using postgresql, mysql or sqlserver, 
// uncomment the @db.Text annotations below
// @see https://next-auth.js.org/schemas/models
model Account {
    id String @id @default(cuid())
    userId String
    type String
    provider String
    providerAccountId String
    refresh_token String? // @db.Text
    access_token String? // @db.Text
    expires_at Int?
    token_type String?
    scope String?
    id_token String? // @db.Text
    session_state String?
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    @@unique([provider, providerAccountId])
}

model Session {
    id String @id @default(cuid())
    sessionToken String @unique
    userId String
    expires DateTime
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id String @id @default(cuid())
    name String?
    email String? @unique
    emailVerified DateTime?
    image String?
    accounts Account[]
    sessions Session[]
    @@openapi.meta({
        findMany: {
            description: 'Find users matching the given conditions'
        },
        delete: {
            method: 'put',
            path: 'dodelete',
            description: 'Delete a unique user',
            summary: 'Delete a user yeah yeah',
            tags: ['delete', 'user']
        },
    })
}

model VerificationToken {
    identifier String
    token String @unique
    expires DateTime
    @@unique([identifier, token])
}
